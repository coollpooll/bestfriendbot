import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from dotenv import load_dotenv
import asyncpg
from fastapi import FastAPI, Request
from openai import OpenAI
from pydub import AudioSegment
from aiogram.types import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from PIL import Image
import io

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
import mimetypes
import zipfile
import rarfile

from PyPDF2 import PdfReader
from docx import Document as DocxDocument
import csv
import pandas as pd
import pptx
import xlrd
import openpyxl
import textract

load_dotenv()

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
DATABASE_URL = os.getenv("DATABASE_URL")
OWNER_CHAT_ID = int(os.getenv("OWNER_CHAT_ID"))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# --- Database logic (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class Database:
    def __init__(self, dsn):
        self.dsn = dsn
        self.pool = None

    async def connect(self):
        self.pool = await asyncpg.create_pool(self.dsn)

    async def disconnect(self):
        if self.pool:
            await self.pool.close()

    async def add_user(self, user_id):
        async with self.pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO users (user_id, requests_today) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
                user_id, 0
            )

    async def add_message(self, user_id, role, content):
        async with self.pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                user_id, role, content
            )

    async def get_history(self, user_id, limit=16):
        async with self.pool.acquire() as connection:
            rows = await connection.fetch(
                """
                SELECT role, content FROM dialog_history
                WHERE user_id = $1
                ORDER BY created_at DESC
                LIMIT $2
                """,
                user_id, limit
            )
            return [{"role": row["role"], "content": row["content"]} for row in reversed(rows)]

db = Database(DATABASE_URL)

# --- –ö–Ω–æ–ø–∫–∏
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="help", description="–ü—Ä–∞–≤–∏–ª–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"),
        BotCommand(command="sub", description="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
    ]
    await bot.set_my_commands(commands)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–û–ú–û–©–¨"), KeyboardButton(text="–ü–û–î–ü–ò–°–ö–ê")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await db.add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π BEST FRIEND ü§ñ\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
        reply_markup=main_keyboard
    )

@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@dp.message(F.text == "/help")
async def help_command(message: types.Message):
    help_text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ü§ñ</b>\n"
        "1. –ù–µ —Å–ø–∞–º—å –∏ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π –±–æ—Ç–æ–º.\n"
        "2. –í–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º, —Ç–µ–∫—Å—Ç–æ–º, –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (PDF, Word, Excel, PPTX, ZIP, RAR, TXT, CSV –∏ –¥—Ä.).\n"
        "3. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å GPT-4o (–µ—Å—Ç—å –ø–∞–º—è—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫/—Ñ–∞–π–ª–æ–≤).\n\n"
        "<b>–ú–æ–¥–µ–ª—å:</b> GPT-4o ‚Äî —É–º–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è, –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π, —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —Ç–≤–æ–π –¥–∏–∞–ª–æ–≥.\n"
        "<b>–ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–µ–∫—Å—Ç–æ–º! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É: [–æ–ø–∏—Å–∞–Ω–∏–µ]'</b>\n"
        "<b>–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –ü–û–î–ü–ò–°–ö–ê.</b>\n"
    )
    await message.answer(help_text)

@dp.message(F.text.lower() == "–ø–æ–¥–ø–∏—Å–∫–∞")
@dp.message(F.text == "/sub")
async def sub_command(message: types.Message):
    sub_url = "https://your-payment-link.com"
    await message.answer(
        "üîó <b>–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n" + sub_url,
        disable_web_page_preview=True
    )

@app.on_event("startup")
async def on_startup():
    await db.connect()
    logging.info("Database connected")
    await set_bot_commands(bot)

@app.on_event("shutdown")
async def on_shutdown():
    await db.disconnect()
    logging.info("Database disconnected")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return {"ok": True}

# -------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π --------
@dp.message(F.text.lower().startswith("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É"))
async def generate_image(message: types.Message):
    prompt = message.text.partition(":")[2].strip()
    if not prompt:
        await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É:'")
        return
    try:
        response = openai_client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response.data[0].url
        await message.answer_photo(image_url, caption="–ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üòî")

# ------- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Whisper + GPT-4o) --------
@dp.message(F.voice)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    file_id = message.voice.file_id
    file = await bot.get_file(file_id)
    ogg_path = f"voice_{user_id}.ogg"
    wav_path = f"voice_{user_id}.wav"
    await bot.download_file(file.file_path, ogg_path)
    try:
        audio = AudioSegment.from_file(ogg_path, format="ogg")
        audio.export(wav_path, format="wav")
    except Exception:
        await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ üò¢")
        return
    try:
        with open(wav_path, "rb") as audio_file:
            transcript = openai_client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text",
                language="ru"
            )
        user_text = transcript.text if hasattr(transcript, "text") else str(transcript)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ üòî")
        return
    finally:
        try:
            os.remove(ogg_path)
            os.remove(wav_path)
        except Exception:
            pass
    await db.add_message(user_id, "user", user_text)
    history = await db.get_history(user_id, limit=16)
    try:
        gpt_response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=history,
        )
        answer = gpt_response.choices[0].message.content
        await db.add_message(user_id, "assistant", answer)
        await message.answer(answer)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò ü§ñ")

# ------- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (GPT-4o Vision) --------
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    img_bytes = await bot.download_file(file.file_path)
    image_data = img_bytes.read()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤ GPT-4o Vision
    gpt_messages = [{"role": "user", "content": [{"type": "text", "text": message.caption or "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}, {"type": "image_url", "image_url": {"url": "data:image/jpeg;base64," + image_data.hex()}}]}]
    try:
        gpt_response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=gpt_messages
        )
        answer = gpt_response.choices[0].message.content
        await message.answer(answer)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üòî")

# ------- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–º—É–ª—å—Ç–∏—Ç—Ä–∏–≥–µ—Ä) --------
@dp.message(F.document)
async def handle_document(message: types.Message):
    user_id = message.from_user.id
    document = message.document
    file = await bot.get_file(document.file_id)
    file_bytes = await bot.download_file(file.file_path)
    filename = document.file_name.lower()

    content = None
    format_note = ""

    # DOCX, DOC
    if filename.endswith(".docx"):
        doc = DocxDocument(io.BytesIO(file_bytes.read()))
        content = "\n".join([p.text for p in doc.paragraphs])
        format_note = "Word DOCX:"
    elif filename.endswith(".doc"):
        try:
            content = textract.process(io.BytesIO(file_bytes.read())).decode('utf-8')
            format_note = "Word DOC:"
        except Exception:
            content = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å DOC-—Ñ–∞–π–ª."
    # PDF
    elif filename.endswith(".pdf"):
        pdf = PdfReader(io.BytesIO(file_bytes.read()))
        text = ""
        for page in pdf.pages[:5]:
            text += page.extract_text() or ""
        content = text
        format_note = "PDF:"
    # TXT
    elif filename.endswith(".txt"):
        content = file_bytes.read().decode("utf-8", errors="ignore")
        format_note = "TXT:"
    # CSV
    elif filename.endswith(".csv"):
        file_bytes.seek(0)
        df = pd.read_csv(file_bytes, delimiter=',', nrows=100)
        content = df.head(20).to_string()
        format_note = "CSV (—Ç–∞–±–ª–∏—Ü–∞):"
    # XLSX
    elif filename.endswith(".xlsx"):
        wb = openpyxl.load_workbook(filename=io.BytesIO(file_bytes.read()), read_only=True)
        ws = wb.active
        data = []
        for i, row in enumerate(ws.iter_rows(values_only=True)):
            if i > 200: break
            data.append("\t".join([str(cell) if cell is not None else "" for cell in row]))
        content = "\n".join(data)
        format_note = "XLSX:"
    # XLS
    elif filename.endswith(".xls"):
        book = xlrd.open_workbook(file_contents=file_bytes.read())
        sheet = book.sheet_by_index(0)
        rows = []
        for i in range(min(200, sheet.nrows)):
            rows.append("\t".join([str(cell.value) for cell in sheet.row(i)]))
        content = "\n".join(rows)
        format_note = "XLS:"
    # PPTX
    elif filename.endswith(".pptx"):
        prs = pptx.Presentation(io.BytesIO(file_bytes.read()))
        slides_text = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    slides_text.append(shape.text)
        content = "\n".join(slides_text)
        format_note = "PPTX (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è):"
    # RTF
    elif filename.endswith(".rtf"):
        content = textract.process(io.BytesIO(file_bytes.read())).decode('utf-8')
        format_note = "RTF:"
    # ZIP
    elif filename.endswith(".zip"):
        file_bytes.seek(0)
        with zipfile.ZipFile(file_bytes, "r") as zipf:
            file_list = zipf.namelist()
            content = "–í –∞—Ä—Ö–∏–≤–µ ZIP —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(file_list[:20])
            format_note = "ZIP-–∞—Ä—Ö–∏–≤:"
    # RAR
    elif filename.endswith(".rar"):
        file_bytes.seek(0)
        with rarfile.RarFile(fileobj=io.BytesIO(file_bytes.read())) as rar:
            file_list = rar.namelist()
            content = "–í –∞—Ä—Ö–∏–≤–µ RAR —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(file_list[:20])
            format_note = "RAR-–∞—Ä—Ö–∏–≤:"
    # –ö–∞—Ä—Ç–∏–Ω–∫–∏
    elif filename.endswith((".png", ".jpg", ".jpeg", ".bmp", ".gif", ".webp")):
        # –ü–æ —Å—É—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ
        await handle_photo(message)
        return
    else:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
        try:
            content = textract.process(io.BytesIO(file_bytes.read())).decode('utf-8')
            format_note = "–î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (textract):"
        except Exception:
            content = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞."
            format_note = "–§–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ:"

    prompt = f"{format_note}\n{content[:4000]}"
    await db.add_message(user_id, "user", prompt)
    history = await db.get_history(user_id, limit=16)
    try:
        gpt_response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=history,
        )
        answer = gpt_response.choices[0].message.content
        await db.add_message(user_id, "assistant", answer)
        await message.answer(answer)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ü§ñ")

# ------- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (GPT-4o + –ø–∞–º—è—Ç—å) --------
@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text

    if user_text.lower() in ["–ø–æ–º–æ—â—å", "–ø–æ–¥–ø–∏—Å–∫–∞", "/help", "/sub"] or user_text.lower().startswith("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É"):
        return

    await db.add_message(user_id, "user", user_text)
    history = await db.get_history(user_id, limit=16)
    try:
        gpt_response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=history,
        )
        answer = gpt_response.choices[0].message.content
        await db.add_message(user_id, "assistant", answer)
        await message.answer(answer)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò ü§ñ")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)


















