import os
from openai import OpenAI
from fastapi import FastAPI, Request, UploadFile, File
from pydantic import BaseModel
import httpx
from serpapi import GoogleSearch
from databases import Database
import aiofiles
import PyPDF2

app = FastAPI()

# Configuration from environment
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID", "your_assistant_id")
SERPAPI_KEY = os.getenv("SERPAPI_KEY", "your_serpapi_key")
DATABASE_URL = os.getenv("DATABASE_URL")
OWNER_CHAT_ID = int(os.getenv("OWNER_CHAT_ID", "520740282"))
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Clients and state
client = OpenAI(api_key=OPENAI_API_KEY)
database = Database(DATABASE_URL)
chat_histories: dict[int, str] = {}
started_users: set[int] = set()

@app.on_event("startup")
async def startup():
    await database.connect()
    # create tables if not exist
    await database.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            chat_id TEXT UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
    )
    await database.execute(
        """
        CREATE TABLE IF NOT EXISTS subscriptions (
            id SERIAL PRIMARY KEY,
            chat_id TEXT UNIQUE,
            is_active BOOLEAN DEFAULT FALSE,
            expires_at TIMESTAMP,
            transaction_id TEXT,
            payment_method TEXT
        );
        """
    )
    await database.execute(
        """
        CREATE TABLE IF NOT EXISTS usage_log (
            id SERIAL PRIMARY KEY,
            chat_id TEXT,
            used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
    )
    await update_bot_commands()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

class TelegramMessage(BaseModel):
    update_id: int
    message: dict | None = None

async def send_message(chat_id: int, text: str):
    async with httpx.AsyncClient() as client_http:
        await client_http.post(
            f"{TELEGRAM_API}/sendMessage",
            json={"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        )

async def download_telegram_file(file_id: str, dest_path: str) -> None:
    async with httpx.AsyncClient() as client_http:
        # get file path
        r = await client_http.get(f"{TELEGRAM_API}/getFile", params={"file_id": file_id})
        result = r.json().get("result", {})
        file_path = result.get("file_path")
        if not file_path:
            return
        # download file
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        resp = await client_http.get(file_url)
        # save to dest_path
        async with aiofiles.open(dest_path, 'wb') as f:
            await f.write(resp.content)

async def update_bot_commands():
    commands = [
        {"command": "start", "description": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"},
        {"command": "sub", "description": "–ü–æ–¥–ø–∏—Å–∫–∞"},
        {"command": "help", "description": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"},
        {"command": "admin", "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"}
    ]
    async with httpx.AsyncClient() as client_http:
        await client_http.post(
            f"{TELEGRAM_API}/setMyCommands",
            json={"commands": commands}
        )

@app.post("/webhook")
async def telegram_webhook(req: Request):
    update = TelegramMessage(**(await req.json()))
    if not update.message:
        return {"ok": True}

    msg = update.message
    chat_id = msg.get("chat", {}).get("id")
    text = msg.get("text", "").strip()

    # Document or file upload
    if doc := msg.get("document"):  # generic file
        file_id = doc.get("file_id")
        file_name = doc.get("file_name", "file")
        dest = f"/tmp/{file_id}_{file_name}"
        await download_telegram_file(file_id, dest)
        await send_message(chat_id, f"‚úÖ –§–∞–π–ª *{file_name}* –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        # If PDF or text, extract and summarize via OpenAI
        ext = file_name.lower().split('.')[-1]
        if ext == 'pdf' or ext == 'txt':
            text_content = ''
            if ext == 'pdf':
                reader = PyPDF2.PdfReader(dest)
                for page in reader.pages:
                    page_text = page.extract_text() or ''
                    text_content += page_text + '\n'
            else:
                async with aiofiles.open(dest, 'r', encoding='utf-8') as f:
                    text_content = await f.read()
            # trim content to first 2000 chars
            snippet = text_content[:2000]
            summary = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
{snippet}"}]
            ).choices[0].message.content
            await send_message(chat_id, f"üìÑ –†–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{summary}")
        return {"ok": True}

    # Photo handling
    if photos := msg.get("photo"):  # photo array
        file_id = photos[-1].get("file_id")
        dest = f"/tmp/{file_id}.jpg"
        await download_telegram_file(file_id, dest)
        await send_message(chat_id, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        return {"ok": True}

    # Log user and usage
    await database.execute(
        "INSERT INTO users (chat_id) VALUES (:chat_id) ON CONFLICT (chat_id) DO NOTHING;",
        {"chat_id": str(chat_id)}
    )
    await database.execute(
        "INSERT INTO usage_log (chat_id) VALUES (:chat_id);",
        {"chat_id": str(chat_id)}
    )

    # Initialize or retrieve conversation thread
    if chat_id not in chat_histories:
        thread = client.beta.threads.create()
        chat_histories[chat_id] = thread.id
    else:
        thread = client.beta.threads.retrieve(chat_histories[chat_id])

    # Handle commands
    if text == "/start":
        if chat_id not in started_users:
            await send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π BESTFRIEND. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.")
            started_users.add(chat_id)
        return {"ok": True}

    if text == "/sub":
        await send_message(chat_id, "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: 399‚ÇΩ/–º–µ—Å –∏–ª–∏ 2990‚ÇΩ/–≥–æ–¥.\n–ù–∞–ø–∏—à–∏ '–ø–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")
        return {"ok": True}

    if text == "/help":
        await send_message(chat_id, "üìñ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å: –≤–æ–ø—Ä–æ—Å, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –Ω–æ–≤–æ—Å—Ç–∏.")
        return {"ok": True}

    if text == "/admin":
        if chat_id != OWNER_CHAT_ID:
            await send_message(chat_id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return {"ok": True}
        total_users = await database.fetch_val("SELECT COUNT(*) FROM users;")
        total_requests = await database.fetch_val("SELECT COUNT(*) FROM usage_log;")
        active_subs = await database.fetch_val("SELECT COUNT(*) FROM subscriptions WHERE is_active = true;")
        stats = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì® –ó–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"üí≥ –ü–æ–¥–ø–∏—Å–æ–∫: {active_subs}"
        )
        await send_message(chat_id, stats)
        return {"ok": True}

    # Image generation
    if any(kw in text.lower() for kw in ["–Ω–∞—Ä–∏—Å—É–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "—Ñ–æ—Ç–æ"]):
        resp = client.images.generate(model="dall-e-3", prompt=text, n=1, size="1024x1024")
        url = resp.data[0].url
        async with httpx.AsyncClient() as client_http:
            await client_http.post(
                f"{TELEGRAM_API}/sendPhoto",
                json={"chat_id": chat_id, "photo": url}
            )
        return {"ok": True}

    # News via SerpAPI
    if any(w in text.lower() for w in ["—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–Ω–æ–≤–æ—Å—Ç–∏"]):
        params = {"q": "–Ω–æ–≤–æ—Å—Ç–∏", "hl": "ru", "gl": "ru", "api_key": SERPAPI_KEY}
        results = GoogleSearch(params).get_dict().get("news_results", [])
        news = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏." if not results else "\n".join(f"‚Ä¢ {i['title']}" for i in results[:5])
        await send_message(chat_id, news)
        return {"ok": True}

    # Regular Assistants API conversation
    client.beta.threads.messages.create(thread_id=thread.id, role="user", content=text)
    run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
    while True:
        status = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        if status.status == "completed":
            break
    msgs = client.beta.threads.messages.list(thread_id=thread.id)
    reply = msgs.data[-1].content[0].text.value
    await send_message(chat_id, reply)
    return {"ok": True}





