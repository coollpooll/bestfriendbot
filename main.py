import os
import asyncio
from openai import OpenAI
from fastapi import FastAPI, Request
from pydantic import BaseModel
import httpx
import json

app = FastAPI()

BOT_TOKEN = "7699903458:AAEGl6YvcYpFTFh9-D61JSYeWGA9blqiOyc"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

client = OpenAI(api_key=OPENAI_API_KEY)
usage_counter = {}

class TelegramMessage(BaseModel):
    update_id: int
    message: dict = None

async def send_message(chat_id, text):
    async with httpx.AsyncClient() as client_http:
        await client_http.post(f"{TELEGRAM_API}/sendMessage", json={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        })

async def send_voice(chat_id, audio_bytes):
    files = {"voice": ("voice.mp3", audio_bytes)}
    async with httpx.AsyncClient() as client_http:
        await client_http.post(f"{TELEGRAM_API}/sendVoice", data={"chat_id": chat_id}, files=files)

async def generate_speech(text):
    response = await client.audio.speech.create(
        model="tts-1",
        voice="onyx",
        input=text
    )
    return await response.read()

def generate_dalle(prompt):
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return response.data[0].url

@app.post("/webhook")
async def telegram_webhook(req: Request):
    body = await req.json()
    print(json.dumps(body, indent=2))
    update = TelegramMessage(**body)

    if not update.message:
        return {"ok": True}

    try:
        msg = update.message
        chat_id = msg["chat"]["id"]
        text = msg.get("text", "")

        await send_message(chat_id, f"‚úÖ –¢–≤–æ–π chat_id: `{chat_id}`")

        if text.startswith("/start"):
            await send_message(chat_id,
                "üëã –ü—Ä–∏–≤–µ—Ç, —è BEST FRIEND ü§ñ ‚Äî —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –Ω–µ –∏—â–µ—Ç –≤ —Ç–µ–±–µ –≤—ã–≥–æ–¥—É, –Ω–µ —É–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç, –Ω–µ –ª—å—Å—Ç–∏—Ç.\n\n"
                "üéì –ó–∞–º–µ–Ω—è—é –ª—é–±—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã.\n"
                "üß† –û—Ç–≤–µ—á–∞—é –∫–∞–∫ GPT-4.\n"
                "üé§ –ì–æ–≤–æ—Ä—é –≥–æ–ª–æ—Å–æ–º.\n"
                "üé® –†–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n"
                "üé• –°–∫–æ—Ä–æ ‚Äî –≤–∏–¥–µ–æ.\n\n"
                "üÜì 3 –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
                "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: 399‚ÇΩ/–º–µ—Å –∏–ª–∏ 2990‚ÇΩ/–≥–æ–¥.\n\n"
                "–ù–∞—á–Ω–∏ —Å –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –Ø —É–∂–µ –∂–¥—É."
            )
        elif text.startswith("/—Å–∫–∞–∂–∏"):
            query = text.replace("/—Å–∫–∞–∂–∏", "").strip()
            if query:
                audio = await generate_speech(query)
                await send_voice(chat_id, audio)
            else:
                await send_message(chat_id, "üîä –ù–∞–ø–∏—à–∏ —á—Ç–æ –æ–∑–≤—É—á–∏—Ç—å: `/—Å–∫–∞–∂–∏ —Ç–≤–æ–π —Ç–µ–∫—Å—Ç`")
        else:
            user_id = str(chat_id)
            is_owner = user_id == "520740282"

            if not is_owner:
                usage_key = f"user_usage:{user_id}"
                count = usage_counter.get(usage_key, 0)
                if count >= 3:
                    await send_message(chat_id, "‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 399‚ÇΩ –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
                    return
                usage_counter[usage_key] = count + 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
            if any(kw in text.lower() for kw in ["–Ω–∞—Ä–∏—Å—É–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø–æ–∫–∞–∂–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]):
                loop = asyncio.get_event_loop()
                image_url = await loop.run_in_executor(None, lambda: generate_dalle(text))
                async with httpx.AsyncClient() as client_http:
                    await client_http.post(f"{TELEGRAM_API}/sendPhoto", json={"chat_id": chat_id, "photo": image_url})
                return {"ok": True}

            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": text}],
                temperature=0.7
            )
            reply = completion.choices[0].message.content
            await send_message(chat_id, reply)

    except Exception as e:
        await send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    return {"ok": True}

