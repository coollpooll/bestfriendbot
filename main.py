import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import asyncpg
from fastapi import FastAPI, Request
from openai import AsyncOpenAI
import aiofiles

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
DATABASE_URL = os.getenv("DATABASE_URL")
OWNER_CHAT_ID = int(os.getenv("OWNER_CHAT_ID", "520740282"))

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

USER_LIMIT = 3  # –ª–∏–º–∏—Ç –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–∞–º

# Simple dict to keep tts state (for demo, use DB for production)
tts_states = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, dsn):
        self.dsn = dsn
        self.pool = None

    async def connect(self):
        self.pool = await asyncpg.create_pool(self.dsn)

    async def disconnect(self):
        if self.pool:
            await self.pool.close()

    async def add_user(self, user_id):
        async with self.pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO users (user_id, requests_today) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
                user_id, 0
            )

    async def get_requests_today(self, user_id):
        async with self.pool.acquire() as conn:
            result = await conn.fetchval(
                "SELECT requests_today FROM users WHERE user_id=$1", user_id
            )
            return result or 0

    async def increment_requests(self, user_id):
        async with self.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET requests_today = requests_today + 1 WHERE user_id=$1",
                user_id
            )

    async def reset_all_limits(self):
        async with self.pool.acquire() as conn:
            await conn.execute("UPDATE users SET requests_today=0")

    async def save_history(self, user_id, prompt, answer):
        async with self.pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO usage_log (user_id, prompt, answer) VALUES ($1, $2, $3)",
                user_id, prompt, answer
            )

db = Database(DATABASE_URL)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await db.add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π BEST FRIEND ü§ñ\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–º–∏—Ç: 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—É—Ç–∫–∏.\n"
        "–í–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∫—É –æ—Ç–≤–µ—Ç–æ–≤: /tts_on\n"
        "–í—ã–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∫—É: /tts_off"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–Ω–∞–ø–∏—à–∏ /image –∏ –ø—Ä–æ–º–ø—Ç)\n"
        "- –û–∑–≤—É—á–∫—É –æ—Ç–≤–µ—Ç–æ–≤ (–≤–∫–ª/–≤—ã–∫–ª: /tts_on /tts_off)\n"
        "- –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)\n"
        "/status ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç"
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    if message.from_user.id == OWNER_CHAT_ID:
        await message.answer("–î–ª—è —Ç–µ–±—è –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å.")
        return
    count = await db.get_requests_today(message.from_user.id)
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {count} –∏–∑ {USER_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤.")

@dp.message(Command("tts_on"))
async def cmd_tts_on(message: types.Message):
    tts_states[message.from_user.id] = True
    await message.answer("–û–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º!")

@dp.message(Command("tts_off"))
async def cmd_tts_off(message: types.Message):
    tts_states[message.from_user.id] = False
    await message.answer("–û–∑–≤—É—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º.")

async def check_limit(user_id):
    if user_id == OWNER_CHAT_ID:
        return True
    requests = await db.get_requests_today(user_id)
    return requests < USER_LIMIT

@dp.message(F.voice)
async def handle_voice(message: types.Message):
    if not await check_limit(message.from_user.id):
        await message.answer("–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤ üòâ")
        return
    file_id = message.voice.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    local_path = f"voice_{message.from_user.id}.ogg"
    await bot.download_file(file_path, local_path)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ogg/opus (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è m4a/wav –∏ —Ç.–¥.)
    async with aiofiles.open(local_path, "rb") as f:
        data = await f.read()
    try:
        transcript = await openai_client.audio.transcriptions.create(
            model="whisper-1",
            file=data,
            response_format="text",
            language="ru"
        )
        prompt = transcript
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ üòî")
        return
    try:
        completion = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = completion.choices[0].message.content.strip()
        await db.increment_requests(message.from_user.id)
        await db.save_history(message.from_user.id, prompt, answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ GPT: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò ü§ñ")
        return
    await message.answer(answer)
    # –û–∑–≤—É—á–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if tts_states.get(message.from_user.id, False):
        try:
            speech = await openai_client.audio.speech.create(
                model="tts-1",
                input=answer,
                voice="nova",  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: nova, alloy, echo, fable, onyx, shimmer
                response_format="ogg_opus"
            )
            audio_file = f"tts_{message.from_user.id}.ogg"
            async with aiofiles.open(audio_file, "wb") as out_f:
                await out_f.write(await speech.aread())
            await bot.send_voice(message.chat.id, types.FSInputFile(audio_file))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞ üò¢")

@dp.message(F.text)
async def handle_text(message: types.Message):
    if message.text.startswith("/image"):
        # –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ DALL-E, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—à—å SD
        prompt = message.text.replace("/image", "").strip()
        if not prompt:
            await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ /image")
            return
        try:
            image_resp = await openai_client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                n=1
            )
            image_url = image_resp.data[0].url
            await message.answer_photo(image_url, caption="–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ üëá")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üòî")
        return

    if not await check_limit(message.from_user.id):
        await message.answer("–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤ üòâ")
        return
    prompt = message.text
    try:
        completion = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = completion.choices[0].message.content.strip()
        await db.increment_requests(message.from_user.id)
        await db.save_history(message.from_user.id, prompt, answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò ü§ñ")
        return
    await message.answer(answer)
    # –û–∑–≤—É—á–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if tts_states.get(message.from_user.id, False):
        try:
            speech = await openai_client.audio.speech.create(
                model="tts-1",
                input=answer,
                voice="nova",
                response_format="ogg_opus"
            )
            audio_file = f"tts_{message.from_user.id}.ogg"
            async with aiofiles.open(audio_file, "wb") as out_f:
                await out_f.write(await speech.aread())
            await bot.send_voice(message.chat.id, types.FSInputFile(audio_file))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞ üò¢")

@app.on_event("startup")
async def on_startup():
    await db.connect()
    logging.info("Database connected")

@app.on_event("shutdown")
async def on_shutdown():
    await db.disconnect()
    logging.info("Database disconnected")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)










